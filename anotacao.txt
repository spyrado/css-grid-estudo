***************** GRID *****************

como saber quantas linhas virtuais eu tenho?


  grid-template-columns: 3fr 1fr;
  grid-template-rows: 20vh 70vh 10vh;

  colunas como eu indiquei DUAS, eu tenho 
  uma linha virtual de começo, uma no meio e
  uma no fim, ou seja tenho 3 linhas.

  em ROWS eu coloquei 3 rows, entao tenho 
  4 linhas virtuais.

  sempre considere o tanto de elemento q vc tem + 1 ( até segunda ordem rsrs )

Quando voce for organizar suas colunas e linhas,
considere o valor referente ao que vc definiu, exemplo:

se vc definiu grid-template-columns: 3fr 1fr; ( duas colunas )
quando for definir que um elemento, tem que ocupar todas as colunas, faça dessa forma:

grid-column: 1 / 3 ( vc ta falando aqui, comece na primeira e vá até a ultima coluna),
mas pq eu coloquei 3? ao invez de 2?, em grid sempre se soma +1 na hora de ordenar o layout.

// aqui seria sem o shorthand feito acima.
grid-column-start: 1;
grid-column-end: 3;

========================== ALINHAMENTO ==========================

-content -> alinha o CONTEUDO DENTRO DO GRID ou seja se tivermos um grid de 800px e o conteudo 
  dentro desse grid for menor que 800px vamos conseguir alinhar com content, se for igual a 800
  não vamos conseguir alinhar POIS o conteudo do grid é do tamanho do grid.

  exemplo de grid não alinhavel por content: 
    .container
      display: grid;
      width: 100vw;
      height: 100vh;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: repeat(3, 1fr); 

    // se vc falar que o filho é 100% do pai, o pai n vai conseguir dar um align-content
    .item 
      width: 100%;
      height: 100%;
    estrutura:
      div.container {
        div.item{

        }
      }

  exemplo de grid ALINHAVEL por content: 
    .container
      display: grid;
      width: 100vw;
      height: 100vh;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: repeat(3, 1fr); 

    // se vc falar que o filho é menor que o pai (<100%) do pai, no pai vc vai conseguir dar um align-content
    .item 
      width: 30%;
      height: 30%;
    estrutura:
      div.container {
        div.item{

        }
      }

-items -> Voce alinha TODOS os ITEMS dentro de uma grid.

-self -> Voce alinha individualmente cada item da grid.